package generate

import (
	"fmt"
	"github.com/spf13/cobra"
	"goharvest2/cmd/harvest/version"
	"goharvest2/pkg/color"
	"goharvest2/pkg/conf"
	"goharvest2/pkg/constant"
	"gopkg.in/yaml.v3"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"text/template"
	"time"
)

type PollerPort struct {
	PollerName string
	Port       int
	ConfigFile string
	LogLevel   int
	Image      string
	Version    string
}

type PollerTemplate struct {
	Pollers []PollerPort
}

type options struct {
	loglevel int
	image    string
}

var opts = &options{
	loglevel: 2,
	image:    "harvest:latest",
}

var Cmd = &cobra.Command{
	Use:   "generate",
	Short: "Generate Harvest related files",
	Long:  "Generate Harvest related files",
}

var systemdCmd = &cobra.Command{
	Use:   "systemd",
	Short: "generate Harvest systemd target for all pollers defined in config",
	Run:   doSystemd,
}

var dockerCmd = &cobra.Command{
	Use:   "docker",
	Short: "generate Harvest docker-compose.yml target for all pollers defined in config",
	Run:   doDockerCompose,
}

var modulesCmd = &cobra.Command{
	Use:   "modules",
	Short: "generate cmd/poller/modules/modules.go - useful when using non-standard modules",
	Run:   doGenerateModulesFile,
}

func doGenerateModulesFile(cmd *cobra.Command, _ []string) {
	if err := generateModulesFile(); err != nil {
		panic(err)
	}
}

// Generate file that imports all required Harvest modules
// This ensures that all Exporters, Collectors and Plugins
// are properly initialized and registered.
func generateModulesFile() error {

	var (
		err                           error
		content                       []byte
		contentYAML                   map[string][]string
		modulesFp, targetDp, targetFp string
		modulesF                      *os.File
		modulesTemplate               *template.Template
		imports                       []string
	)

	modulesFp = path.Join(conf.GetHarvestConfPath(), constant.ModulesFileName)
	targetDp = path.Join(conf.GetHarvestHomePath(), "cmd/poller/modules/")
	targetFp = path.Join(targetDp, "modules.go")

	fmt.Printf("Generating [%s] from [%s]\n", targetFp, modulesFp)

	if content, err = ioutil.ReadFile(modulesFp); err != nil {
		return err
	}

	if err = yaml.Unmarshal(content, &contentYAML); err != nil {
		return err
	}

	if err = os.MkdirAll(targetDp, 0755); err != nil {
		return err
	}

	if modulesF, err = os.Create(targetFp); err != nil {
		return err
	}

	for key, mods := range contentYAML {
		imports = append(imports, fmt.Sprintf("\t// %s", key))
		for _, m := range mods {
			imports = append(imports, fmt.Sprintf("\t_ %q", m))
		}
	}

	modulesTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
//
// Copyright NetApp Inc, 2021 All rights reserved
//
// Package dynamically imports the modules that should be running as part of Poller.
// File was generated from {{ .Origin }} at
// {{ .Timestamp }}.
package modules

import (
{{- range .Imports }}
{{ printf "%s" . }}
{{- end }}
)
`))

	return modulesTemplate.Execute(modulesF, struct {
		Timestamp time.Time
		Origin    string
		Imports   []string
	}{
		Timestamp: time.Now(),
		Origin:    modulesFp,
		Imports:   imports,
	})
}

func doSystemd(cmd *cobra.Command, _ []string) {
	var config = cmd.Root().PersistentFlags().Lookup("config")
	generateSystemd(config.Value.String())
}

func doDockerCompose(cmd *cobra.Command, _ []string) {
	var config = cmd.Root().PersistentFlags().Lookup("config")
	generateDockerCompose(config.Value.String())
}

func generateDockerCompose(path string) {
	pollerTemplate := PollerTemplate{}
	err := conf.LoadHarvestConfig(path)
	if err != nil {
		return
	}
	if conf.Config.Pollers == nil {
		return
	}
	// fetch absolute path of file for binding to volume
	absPath, err := filepath.Abs(path)
	if err != nil {
		panic(err)
	}
	conf.ValidatePortInUse = true
	for _, v := range conf.Config.PollersOrdered {
		port, _ := conf.GetPrometheusExporterPorts(v)
		pollerTemplate.Pollers = append(pollerTemplate.Pollers, PollerPort{v, port, absPath, opts.loglevel, opts.image, version.VERSION})
	}

	t, err := template.New("docker-compose.tmpl").ParseFiles("docker/onePollerPerContainer/docker-compose.tmpl")
	if err != nil {
		panic(err)
	}

	color.DetectConsole("")
	println("Save the following to " + color.Colorize("docker-compose.yml", color.Green) +
		" or " + color.Colorize("> docker-compose.yml", color.Green))
	println("and then run " + color.Colorize("docker-compose -f docker-compose.yml up -d --remove-orphans", color.Green))

	err = t.Execute(os.Stdout, pollerTemplate)
	if err != nil {
		panic(err)
	}
}

func generateSystemd(path string) {
	err := conf.LoadHarvestConfig(path)
	if err != nil {
		return
	}
	if conf.Config.Pollers == nil {
		return
	}
	t, err := template.New("target.tmpl").ParseFiles("service/contrib/target.tmpl")
	if err != nil {
		panic(err)
	}
	color.DetectConsole("")
	println("Save the following to " + color.Colorize("/etc/systemd/system/harvest.target", color.Green) +
		" or " + color.Colorize("| sudo tee /etc/systemd/system/harvest.target", color.Green))
	println("and then run " + color.Colorize("systemctl daemon-reload", color.Green))
	err = t.Execute(os.Stdout, conf.Config)
	if err != nil {
		panic(err)
	}
}

func init() {
	Cmd.AddCommand(systemdCmd)
	Cmd.AddCommand(dockerCmd)
	Cmd.AddCommand(modulesCmd)

	dockerCmd.PersistentFlags().IntVarP(
		&opts.loglevel,
		"loglevel",
		"l",
		2,
		"logging level (0=trace, 1=debug, 2=info, 3=warning, 4=error, 5=critical)",
	)
	dockerCmd.PersistentFlags().StringVar(
		&opts.image,
		"image",
		"harvest:latest",
		"Harvest image",
	)
}
