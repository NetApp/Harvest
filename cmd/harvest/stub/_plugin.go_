package main

import (
	"goharvest2/poller/plugin"
	"goharvest2/poller/registrar"
	"goharvest2/share/matrix"

	/* uncomment to use:
	"goharvest2/share/logger"
	"goharvest2/share/errors"
	*/
)

/* 
Here we declare the new plugin
Your plugin has these fields:
 - Name   (string) - name of your plugin
 - Parent (string) - name of your parent collector
 - Prefix (string) - nicely formatted name of plugin, used for logging
 - Options (*options.Options) - poller start-up options
 - Params (*node.Node) - parameters of the plugin (if defined in collector template)
 - ParentParams (*node.Node) - parameters of parent collector
You can add other fields if you need.
*/
type PLUGIN struct {
	*plugin.AbstractPlugin
}

/* 
Here we register a new plugin, no need to change!
*/
var plugin.Plugin = (*PLUGIN)(nil)
func init() {
    registrar.RegisterPlugin("PLUGIN", func() plugin.Plugin { return new(PLUGIN) })
}

/*
Here we initialize the plugin
func (p *PLUGIN) Init(abc *plugin.AbstractPlugin) error {
    p.AbstractPlugin = abc
    return p.AbstractPlugin.Init()
}
*/

/* Here is where the main job needs to be done. The argument
   of the plugin is the matrix from your parent collector.
   The plugin can either manipulate this matrix, or create
   new matrices by its own.

   In our dummy example, we will just add a custom label
   to all instances. Additionally if the instance has no
   name label, we will blacklist it.
*/

func (p *PLUGIN) Run(m *matrix.Matrix) ([]*matrix.Matrix, error) {

	for _, instance := range m.GetInstances() {

		instance.SetLabel("comment", "plugin was here!")

		if instance.GetLabel("name") == "" {
			instance.SetExportable(false)
		}
	}

	// we return nil, because we didn't create a new matrix
	// (some advanced plugins will create a new matrices and return those)
	return nil, nil
}
