package main

import (

	// "fmt" uncomment for the dummy example in Export()

	"goharvest2/poller/exporter"
	"goharvest2/poller/registrar"
	"goharvest2/share/matrix"

	/* You might want to uncomment and use some of these:

	"goharvest2/share/logger"
	"goharvest2/share/errors"
	*/
)

/* Logging is useful for debugging your exporter, here are a few exmaples:

	me.Logger.Warn().Msg("nothing to exporter")
	me.Logger.Debug().Msgf("exporter %d data points!!", count)
	me.Logger.Error().Stack().Err(err).Msg("open URL:")

	(the examples assume you are in a struct method with receiver "e")
*/

/*
You exporter is initialized with a number of fields, some of them are important to know:
  - Class       the generic name of your exporter
  - Name		the instance name of your exporter (a user can define multiple instances of the same exporter)
  - Params		parameters of your exporter loaded from harvest.yml
  - Options     the startup options of the poller
  - Prefix		formatted prefix for logger
  - Mutex		lock for the exporter (since multiple collectors can try to export data at the same time, you
  				should always lock your exporter before exporting, see example below)
You can add more attributes to the exporter if you want!
*/
type EXPORTER struct {
	*exporter.AbstractExporter
}

/*
This method registers your exporter as a module, no need to touch it.
*/
func init() {
    registrar.RegisterExporter("EXPORTER", func() exporter.Exporter { return new(EXPORTER) })
}
var _ exporter.Exporter = (*EXPORTER)(nil)

/* This method initializes your exporter. If you need to initialize a client or check parameters,
   you can do it here. Don't remove the first two lines since these will do some useful work for you.
*/
func (e *EXPORTER) Init(abc *exporter.AbstractExporter) error {
    e.AbstractExporter = abc
	return e.InitAbc()
}

/* This is the only method that needs to be written by You!

   You get a *matrix.Matrix instance from a collector and you need
   to export it to your datasource.

   In our dummy example we will simply write everything to Stdout.
   (You need to run your poller in foreground to see the results)
*/

func (e *EXPORTER) Export(m *matrix.Matrix) error {
	// always lock your exporter first!
	e.Lock()
	defer e.Unlock()

	for key, instance := range m.GetInstances() {

		// some instances need no export
		if ! instance.IsExportable() {
			continue
		}

		fmt.Printf("instance [%s] with labels [%s]\n", key, instance.GetLabels().String())

		for _, metric := range m.GetMetrics() {

			// some metrics need no export
			if ! metric.IsExportable() {
				continue
			}

			// most of the time, if metric has no value, there is no need to export it
			if value, has := metric.GetValueString() {
				fmt.Printf(" --> %-20s = %s\n", metric.GetName(), value)
			} else {
				fmt.Printf(" --> %-20s = <no value>\n", metric.GetName())
			}
		}
	}
}
